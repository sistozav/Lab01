C compilers complain when functions are defined after a call.  They 
produce errors or sometimes won't compile.  However, placing functions
before a call can make it difficult to organize large programs with
many subroutines.  

Alternatively, you can write "prototypes" of functions at the beginning 
of a program before they are used, and place the actual function later.
Prototypes are basically information about functions that are to be 
used in the program.

Example without prototype:

int max(int x, int y)
{
if (x > y) return x;
else return y;
}

int main()
{
int k = max(7,16);
}

Example with prototype:

int max(int x, int y); /* This is the prototype for max */

int main()
{
int k = max(7,16);
}

int max(int x, int y)
{
if (x > y) return x;
else return y;
}

Prototypes will clue the compiler about what types of input and 
output parameters are for the function.

In this directory are four programs

program1.c -- C program where a function is defined after it is called.  
   It results in compiler warnings.

program2.c -- C program where a function is defined before it is called.  
   No warnings  when compiled.

program3.c -- C program where a function is defined before it is called 
   but there is a prototype before the call.  No warnings when compiled.

program4.c -- C program that has a header file.  The header file has 
   the prototype of the function.  No warnings when compiled.

Read them and then compile them to see what happens.

Also, you can compile source code outside of the current directory.  
For example, in this directory, there is a subdirectory Room100A.  
It has the source code "program5.c".  Type

gcc Room100A/program5.c

This will generate an a.out file in the current directory.


